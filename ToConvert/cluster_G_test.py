from freud import cluster
from freud import trajectory
import numpy
import random
import math

# create an ellipsoid
N = 1000

points = numpy.zeros(shape=(N,3), dtype='float32')
a = 10
b = 5
c = 5

# naievly assign each point a random u and v
for i in range(0,N):
    u = random.random()*2.0 - 1.0;
    theta = random.random() * 2.0 * math.pi;

    points[i][0] = a * math.cos(theta) * math.sqrt(1 - u*u)
    points[i][1] = b * math.sin(theta) * math.sqrt(1 - u*u);
    points[i][2] = c * u

# assign all poinst to the same cluster
cluster_idx = numpy.zeros(N, dtype=numpy.uint32);

box = trajectory.Box(50);

clp = cluster.ClusterProperties(box);
clp.computeProperties(points, cluster_idx);

print(clp.getClusterCOM()[0])
G = clp.getClusterG();
print(G[0,:,:])

l, v = numpy.linalg.eig(G[0,:,:])
print("radii: {}".format(numpy.sqrt(l)))
print("v: {}".format(v))

#f = open('test.xyz', 'w');
#f.write("%d\n" % N);
#f.write(" generated by test_cluster.py\n");
#for m in xrange(0, N):
#    f.write("  M     %f     %f     %f\n" % (points[m][0], points[m][1], points[m][2]));
